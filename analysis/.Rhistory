data$MaxDegree <- as.numeric(data$MaxDegree)
fi2 <- lm(scale(MetricValue) ~ scale(NumOfEdges), data = data2)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
fit <- lm(scale(MetricValue) ~ scale(AvgShortestPath), data = data2)
fi3 <- lm(scale(MetricValue) ~ scale(AvgClustering), data = data2)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
data2$AvgShortestPath <- as.numeric(data2$AvgShortestPath)
data2$AvgClustering <- as.numeric(data2$AvgClustering)
data2$Betweenness <- as.numeric(data2$Betweenness)
data2$HigherDegree <- as.numeric(data2$HigherDegree)
data2$NumOfEdges <- as.numeric(data2$NumOfEdges)
data2$MaxDegree <- as.numeric(data2$MaxDegree)
fit <- lm(scale(MetricValue) ~ scale(AvgShortestPath), data = data2)
summary(fit)
fi3 <- lm(scale(MetricValue) ~ scale(AvgClustering), data = data2)
summary(fi3)
fi4 <- lm(scale(MetricValue) ~ scale(Betweenness), data = data2)
summary(fi4)
fit <- lm(scale(MetricValue) ~ scale(AvgShortestPath), data = data2)
summary(fit)
fit5 <- lm(scale(MetricValue) ~ scale(HigherDegree), data = data2)
summary(fit5)
fit5 <- lm(scale(MetricValue) ~ scale(AvgShortestPath) + scale(Betweenness), data = data2)
summary(fit5)
fit7 <- lm(scale(MetricValue) ~ scale(AvgShortestPath) + scale(AvgClustering), data = data2)
summary(fit7)
fit7 <- lm(scale(MetricValue) ~ scale(AvgShortestPath) + scale(AvgClustering) + scale(Betweenness), data = data2)
summary(fit7)
fit7 <- lm(scale(MetricValue) ~ scale(AvgShortestPath) + scale(AvgClustering) + scale(HigherDegree), data = data2)
summary(fit7)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
plot <- visualize(data = data, xAxis = "Model", yAxis = "MetricValue",
legend = "Model", minValue = 1, maxValue = maxValue)
plot + facet_grid(. ~ Size) +
xlab("Topologies") +
ggtitle("The evaluation times of the Reachability query in Sesame") +
geom_boxplot(aes_string(shape = "Model", colour = "Model"))
ggsave(file = "../diagrams/sesame_q1.pdf",
width = 250,
height = 180, units = "mm",
dpi = 1000)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
plot <- visualize(data = data, xAxis = "Model", yAxis = "MetricValue",
legend = "Model", minValue = 1, maxValue = maxValue)
plot + facet_grid(. ~ Size) +
xlab("Topologies") +
ggtitle("The evaluation times of the Reachability query in Blazegraph") +
geom_boxplot(aes_string(shape = "Model", colour = "Model"))
ggsave(file = "../diagrams/blaze_q1.pdf",
width = 250,
height = 180, units = "mm",
dpi = 1000)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
fit <- lm(scale(MetricValue) ~ scale(AvgShortestPath), data = data2)
summary(fit)
fi3 <- lm(scale(MetricValue) ~ scale(AvgClustering), data = data2)
summary(fi3)
fit5 <- lm(scale(MetricValue) ~ scale(HigherDegree), data = data2)
summary(fit5)
fit8 <- lm(scale(MetricValue) ~ scale(HigherDegree) + scale(AvgClustering) + scale(MaxDegree), data = data2)
summary(fit8)
fit <- lm(scale(log10(MetricValue)) ~ scale(AvgShortestPath), data = data2)
summary(fit)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
fit <- lm(scale(log10(MetricValue)) ~ scale(AvgShortestPath), data = data2)
summary(fit)
plot(fit, which=1)
plot(fit, which=2)
plot(fit, which=3)
plot(fit, which=4)
plot(fit, which=5)
plot(fit, which=6)
plot(fit, which=1)
plot(fit, which=2)
fit <- lm(scale(MetricValue) ~ scale(AvgShortestPath), data = data2)
plot(fit, which=2)
plot <- visualize(data = data, xAxis = "AvgShortestPath", yAxis = "MetricValue",
legend = "Model", minValue = 1, maxValue = maxValue)
title <- paste("The evaluation times of the ", query, " query in ", tool, sep="")
plot + facet_grid(. ~ Size) +
xlab("Topologies") +
ggtitle(title) +
geom_boxplot(aes_string(shape = "Model", colour = "Model"))
plot(MetricValue ~ AvgShortestPath, data2)
qplot(MetricValue ~ AvgShortestPath, data2, xlim = c(0,25))
qplot(y = MetricValue, x = AvgShortestPath, data = data2, xlim = c(0,25))
qplot(y = MetricValue, x = AvgShortestPath, data = data2, xlim = c(0,25), ylim = c(0, 25000))
scale[, "AvgShortestPath"]
data2[, "AvgShortestPath"]
data3 <- ddply(data2, select = c(MetricValue, AvgShortestPath))
data3 <- subset(data2, select = c(MetricValue, AvgShortestPath))
View(data3)
View(data3)
data3
write.csv(data3, file="avg_path.csv", row.names=FALSE)
usePackage("faraway")
usePackage("mda")
data(fat)
df <- fat[c(-1, -3, -8)]
head(df)
fatfit <- mars(df[, -1],    # matrix containing the independent variables
df[, 1],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
summary(lm(df[,1] ~ fatfit$x-1))
head(data2)
names(data2)
df <- data[c(-3, -14, -15, -16, -18, -19, -20, -21, -22, -23, -24, -25)]
names(df)
fatfit <- mars(df[, -13],    # matrix containing the independent variables
df[, 13],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
summary(lm(df[,13] ~ fatfit$x-1))
sum(fatfit$res^2)
df <- fat[c(-1, -3, -8)]
fatfit <- mars(df[, -1],    # matrix containing the independent variables
df[, 1],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
par(mfrow = c(3, 5),     # c(nrows, ncols)
mar = c(2, 2, 2, 2), # margin: bottom-left-top-right
pty = "s")
for (i in 2:15) {
j <- i - 1 # adjust index for matrices below
xp <- matrix(sapply(df[2:15], mean), # 252x14 double matrix
nrow(df),
ncol(df) - 1,
byrow = TRUE);
colnames(xp) <- names(df[2:15])
xr <- sapply(df, range);   # 2x15 double matrix
xp[, j] <- seq(xr[1, i],  # minimum of variable i
xr[2, i],   # maximum of variable i
len = nrow(df));
xf <- predict(fatfit, xp);
plot(xp[, j], xf,
xlab = names(df)[i],
ylab = "",
ylim = c(0, 50),
type = "l");
}
df <- data[c(-3, -14, -15, -16, -18, -19, -20, -21, -22, -23, -24, -25)]
fatfit <- mars(df[, -13],    # matrix containing the independent variables
df[, 13],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
summary(lm(df[,13] ~ fatfit$x-1))
df <- data[c(-3, -14, -15, -16, -18, -19, -20, -21, -22, -23, -24, -25)]
fatfit <- mars(df[, -13],    # matrix containing the independent variables
df[, 13],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
names(data2)
df <- data[c(1, 2, 26))]
df <- data[c(1, 2, 26)]
names(df)
df <- data[c(1, 2, 26, 17)]
names(df)
fatfit <- mars(df[, -4],    # matrix containing the independent variables
df[, 4],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
summary(lm(df[,4] ~ fatfit$x-1))
names(fatfit)
summary(lm(df[,4] ~ fatfit$x-1 + fatfit$x-2))
summary(lm(df[,4] ~ fatfit$x-1 ))
summary(fatfit)
data(fat)
df <- fat[c(-1, -3, -8)]
fatfit <- mars(df[, -1],    # matrix containing the independent variables
df[, 1],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
cuts <- fatfit$cuts[fatfit$selected.terms, ]
dimnames(cuts) <- list(NULL, names(df[-1])) # dimnames must be a list
cuts
names(data2)
df <- data2[c(1,2,3,4,5,6,7,8,9,10,11,12,17,26)]
names(df)
fatfit <- mars(df[, -13],    # matrix containing the independent variables
df[, 13],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
names(data2)
names(df)
fatfit <- mars(df[, -13],    # matrix containing the independent variables
df[, 13],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
names(data2)
df <- data2[c(1,2,3,17)]
names(df)
fatfit <- mars(df[, -4],    # matrix containing the independent variables
df[, 4],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
df
names(df)
names(data2)
df <- data2[c(1,2,17, 26)]
names(df)
fatfit <- mars(df[, -3],    # matrix containing the independent variables
df[, 3],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
summary(lm(df[,4] ~ fatfit$x-1 ))
cuts <- fatfit$cuts[fatfit$selected.terms, ]
dimnames(cuts) <- list(NULL, names(df[-1])) # dimnames must be a list
cuts
factor <- fatfit$factor[fatfit$selected.terms, ]
dimnames(factor) <- list(NULL, names(df[-1])) # dimnames must be a list
factor
names(df)
head(df)
head(df)
summary(lm(df[,3] ~ fatfit$x-1 ))
scale(df, 1)
scale(df[,1])
scale(df[,2])
scale(df[,3])
scale(df[,4])
head(df)
df <- scale(df[,4])
df <- scale(df[,3])
df <- data2[c(1,2,17, 26)]
df <- scale(df[,c(1,2,3,4)])
View(df)
df
df <- data2[c(1,2,17, 26)]
fatfit <- mars(df[, -3],    # matrix containing the independent variables
df[, 3],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
summary(lm(df[,3] ~ fatfit$x-1 ))
cuts <- fatfit$cuts[fatfit$selected.terms, ]
dimnames(cuts) <- list(NULL, names(df[-1])) # dimnames must be a list
cuts
factor <- fatfit$factor[fatfit$selected.terms, ]
dimnames(factor) <- list(NULL, names(df[-1])) # dimnames must be a list
factor
df <- data2[c(1,2,17, 26)]
fatfit <- mars(df[, -3],    # matrix containing the independent variables
df[, 3],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
summary(lm(df[,3] ~ fatfit$x-1 ))
summary(fatfit)
summary(lm(df[,3] ~ fatfit$x-1 ))
cuts <- fatfit$cuts[fatfit$selected.terms, ]
dimnames(cuts) <- list(NULL, names(df[-1])) # dimnames must be a list
cuts
factor <- fatfit$factor[fatfit$selected.terms, ]
dimnames(factor) <- list(NULL, names(df[-1])) # dimnames must be a list
factor
summary(lm(df[,3] ~ fatfit$x-1 ))
cuts <- fatfit$cuts[fatfit$selected.terms, ]
dimnames(cuts) <- list(NULL, names(df[-3])) # dimnames must be a list
cuts
factor <- fatfit$factor[fatfit$selected.terms, ]
dimnames(factor) <- list(NULL, names(df[-3])) # dimnames must be a list
factor
names(data2)
df <- data2[c(1,2,5, 10, 17, 26)]
head(df)
fatfit <- mars(df[, -5],    # matrix containing the independent variables
df[, 5],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
names(fatfit)
summary(lm(df[,5] ~ fatfit$x-1 ))
cuts <- fatfit$cuts[fatfit$selected.terms, ]
dimnames(cuts) <- list(NULL, names(df[-5])) # dimnames must be a list
cuts
factor <- fatfit$factor[fatfit$selected.terms, ]
dimnames(factor) <- list(NULL, names(df[-5])) # dimnames must be a list
factor
res = 5
fatfit <- mars(df[, -res],    # matrix containing the independent variables
df[, res],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
res = 5
fatfit <- mars(df[, -res],    # matrix containing the independent variables
df[, res],     # vector containing the response variable
degree = 1, # default: 1 -- no interaction terms
prune = T)
names(fatfit)
summary(lm(df[,res] ~ fatfit$x-1 ))
cuts <- fatfit$cuts[fatfit$selected.terms, ]
dimnames(cuts) <- list(NULL, names(df[-res])) # dimnames must be a list
cuts
factor <- fatfit$factor[fatfit$selected.terms, ]
dimnames(factor) <- list(NULL, names(df[-res])) # dimnames must be a list
factor
plot(fatfit)
plot(fatfit$residuals)
plot(fatfit$residuals)
plot(fatfit$residuals, fatfit$fitted.values)
hist(fatfit$residuals, fatfit$fitted.values)
hist(fatfit$residuals)
hist(fatfit$fitted.values, df[, res])
plot(fatfit$fitted.values, df[, res])
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
plot <- visualize(data = data, xAxis = "Model", yAxis = "MetricValue",
legend = "Model", minValue = 1, maxValue = maxValue)
title <- paste("The evaluation times of the ", query, " query in ", tool, sep="")
plot + facet_grid(. ~ Size) +
xlab("Topologies") +
ggtitle(title) +
geom_boxplot(aes_string(shape = "Model", colour = "Model"))
fi3 <- lm(scale(MetricValue) ~ scale(AvgClustering), data = data2)
summary(fi3)
data2 <- subset(data, Size == "80k")
fi2 <- lm(scale(MetricValue) ~ scale(NumOfEdges), data = data2)
data2$AvgShortestPath <- as.numeric(data2$AvgShortestPath)
data2$AvgClustering <- as.numeric(data2$AvgClustering)
data2$Betweenness <- as.numeric(data2$Betweenness)
data2$HigherDegree <- as.numeric(data2$HigherDegree)
data2$NumOfEdges <- as.numeric(data2$NumOfEdges)
data2$MaxDegree <- as.numeric(data2$MaxDegree)
fi3 <- lm(scale(MetricValue) ~ scale(AvgClustering), data = data2)
summary(fi3)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
fi3 <- lm(scale(MetricValue) ~ scale(AvgClustering), data = data2)
summary(fi3)
fit7 <- lm(scale(MetricValue) ~ scale(AvgShortestPath) + scale(AvgClustering), data = data2)
summary(fit7)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
plot <- visualize(data = data, xAxis = "Model", yAxis = "MetricValue",
legend = "Model", minValue = 1, maxValue = maxValue)
title <- paste("The evaluation times of the Navigations in ", tool, sep="")
plot + facet_grid(. ~ Size) +
xlab("Topologies") +
ggtitle(title) +
geom_boxplot(aes_string(shape = "Model", colour = "Model"))
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
plot <- visualize(data = data, xAxis = "Model", yAxis = "MetricValue",
legend = "Model", minValue = 1, maxValue = maxValue)
title <- paste("The evaluation times of the Navigations query in ", tool, sep="")
plot + facet_grid(. ~ Size) +
xlab("Topologies") +
ggtitle(title) +
geom_boxplot(aes_string(shape = "Model", colour = "Model"))
ggsave(file = "../diagrams/4store_q1.pdf",
width = 250,
height = 180, units = "mm",
dpi = 1000)
ggsave(file = "../diagrams/4store_q2.pdf",
width = 250,
height = 180, units = "mm",
dpi = 1000)
data2 <- subset(data, Size == "20k")
fi3 <- lm(scale(MetricValue) ~ scale(AvgClustering), data = data2)
summary(fi3)
fit5 <- lm(scale(MetricValue) ~ scale(HigherDegree), data = data2)
summary(fit5)
data2$AvgShortestPath <- as.numeric(data2$AvgShortestPath)
data2$AvgClustering <- as.numeric(data2$AvgClustering)
data2$Betweenness <- as.numeric(data2$Betweenness)
data2$HigherDegree <- as.numeric(data2$HigherDegree)
data2$NumOfEdges <- as.numeric(data2$NumOfEdges)
data2$MaxDegree <- as.numeric(data2$MaxDegree)
fit <- lm(scale(MetricValue) ~ scale(AvgShortestPath), data = data2)
summary(fit)
fi3 <- lm(scale(MetricValue) ~ scale(AvgClustering), data = data2)
summary(fi3)
fi4 <- lm(scale(MetricValue) ~ scale(Betweenness), data = data2)
summary(fi4)
fit5 <- lm(scale(MetricValue) ~ scale(HigherDegree) + scale(Betweenness), data = data2)
summary(fit5)
fi2 <- lm(scale(MetricValue) ~ scale(MaxDegree), data = data2)
summary(fi2)
fit5 <- lm(scale(MetricValue) ~ scale(MaxDegree) + scale(Betweenness), data = data2)
summary(fit5)
data2 <- subset(data, Size == "5k")
data2$AvgShortestPath <- as.numeric(data2$AvgShortestPath)
data2$AvgClustering <- as.numeric(data2$AvgClustering)
data2$Betweenness <- as.numeric(data2$Betweenness)
data2$HigherDegree <- as.numeric(data2$HigherDegree)
data2$NumOfEdges <- as.numeric(data2$NumOfEdges)
data2$MaxDegree <- as.numeric(data2$MaxDegree)
fit5 <- lm(scale(MetricValue) ~ scale(MaxDegree) + scale(Betweenness), data = data2)
summary(fit5)
data2 <- subset(data, Size == "10k")
data2$AvgShortestPath <- as.numeric(data2$AvgShortestPath)
data2$AvgClustering <- as.numeric(data2$AvgClustering)
data2$Betweenness <- as.numeric(data2$Betweenness)
data2$HigherDegree <- as.numeric(data2$HigherDegree)
data2$NumOfEdges <- as.numeric(data2$NumOfEdges)
data2$MaxDegree <- as.numeric(data2$MaxDegree)
fit5 <- lm(scale(MetricValue) ~ scale(MaxDegree) + scale(Betweenness), data = data2)
summary(fit5)
data2 <- subset(data, Size == "40k")
data2$AvgShortestPath <- as.numeric(data2$AvgShortestPath)
data2$AvgClustering <- as.numeric(data2$AvgClustering)
data2$Betweenness <- as.numeric(data2$Betweenness)
data2$HigherDegree <- as.numeric(data2$HigherDegree)
data2$NumOfEdges <- as.numeric(data2$NumOfEdges)
data2$MaxDegree <- as.numeric(data2$MaxDegree)
fit5 <- lm(scale(MetricValue) ~ scale(MaxDegree) + scale(Betweenness), data = data2)
summary(fit5)
data2 <- subset(data, Size == "80k")
data2$AvgShortestPath <- as.numeric(data2$AvgShortestPath)
data2$AvgClustering <- as.numeric(data2$AvgClustering)
data2$Betweenness <- as.numeric(data2$Betweenness)
data2$HigherDegree <- as.numeric(data2$HigherDegree)
data2$NumOfEdges <- as.numeric(data2$NumOfEdges)
data2$MaxDegree <- as.numeric(data2$MaxDegree)
fit5 <- lm(scale(MetricValue) ~ scale(MaxDegree) + scale(Betweenness), data = data2)
summary(fit5)
source('~/git/trainbenchmark/analysis/analyzeRegressions.R', echo=TRUE)
fit5 <- lm(scale(MetricValue) ~ scale(MaxDegree) + scale(Betweenness), data = data2)
summary(fit5)
data[data$Size == "5k", "NumOfEdges"]
data[data$Size == "5k" & data$ModelDensity == "K3", "NumOfEdges"]
for (s in c("5k", "10k", "20k", "40k", "80k")) {
for (d in c("K3", "K4", "K5", "K6", "K7")) {
print("----------")
print(s)
print(d)
min(data[data$Size == s & data$ModelDensity == d, "NumOfEdges"])
max(data[data$Size == s & data$ModelDensity == d, "NumOfEdges"])
print("----------")
}
}
for (s in c("5k", "10k", "20k", "40k", "80k")) {
for (d in c("K3", "K4", "K5", "K6", "K7")) {
print("----------")
print(s)
print(d)
print(min(data[data$Size == s & data$ModelDensity == d, "NumOfEdges"]))
print(max(data[data$Size == s & data$ModelDensity == d, "NumOfEdges"]))
print("----------")
}
}
for (s in c("5k", "10k", "20k", "40k", "80k")) {
# for (d in c("K3", "K4", "K5", "K6", "K7")) {
print("----------")
print(s)
# print(d)
print(min(data[data$Size == s, "NumOfEdges"]))
print(max(data[data$Size == s, "NumOfEdges"]))
print("----------")
# }
}
sizes <- c(1, 2, 3, 4, 5)
densities <- c("K3", "K4", "K5", "K6", "K7")
for(s in sizes) {
for (d in densities) {
values <- scales[scales$MetricName == "Density" & scales$Size == s & scales$ModelDensity == d, "MetricValue"]
max <- max(scales[scales$MetricName == "Density" & scales$Size == s & scales$ModelDensity == d, "MetricValue"])
print(s)
print(d)
print(sd(values))
print(sd(values)/max)
}
}
scales <- subset(results, Tool == "Sesame" &
PhaseName == "CalcModelMetrics" &
RunIndex == 1 &
Size %in% c(1,2,3,4,5) &
MetricName == "Density" &
#                    MetricName %in% c("AvgClusteringStation", "Betweenness",
#                                      "AvgShortestPath", "MaxDegree", "Density") &
CaseName == "StationsPath")
scales$Model <- as.character(scales$Model)
scales[scales$Model == "Schedule-Scale-Free-Hom", "Model"] <- "Scale-Free"
scales[scales$Model == "Schedule-Hierarchical", "Model"] <- "Hierarchical"
scales[scales$Model == "Schedule-Random", "Model"] <- "Random"
scales[scales$Model == "Schedule-Watts-Strogatz-01", "Model"] <- "WS-0.1"
scales[scales$Model == "Schedule-Watts-Strogatz-001", "Model"] <- "WS-0.01"
scales[scales$Model == "Schedule-Watts-Strogatz-0001", "Model"] <- "WS-0.001"
sizes <- c(1, 2, 3, 4, 5)
densities <- c("K3", "K4", "K5", "K6", "K7")
for(s in sizes) {
for (d in densities) {
values <- scales[scales$MetricName == "Density" & scales$Size == s & scales$ModelDensity == d, "MetricValue"]
max <- max(scales[scales$MetricName == "Density" & scales$Size == s & scales$ModelDensity == d, "MetricValue"])
print(s)
print(d)
print(sd(values))
print(sd(values)/max)
}
}
sdValues <- c()
probValues <- c()
for(s in sizes) {
for (d in densities) {
values <- scales[scales$MetricName == "Density" & scales$Size == s & scales$ModelDensity == d, "MetricValue"]
max <- max(scales[scales$MetricName == "Density" & scales$Size == s & scales$ModelDensity == d, "MetricValue"])
print(s)
print(d)
sdValues <- c(sdValues, sd(values))
probValues <- c(probValues, sd(values)/max)
}
}
sdValues
avg(sdValues)
average(sdValues)
mean(sdValues)
mean(probValues)
fi2 <- lm(scale(MetricValue) ~ scale(MaxDegree), data = data2)
summary(fi2)
